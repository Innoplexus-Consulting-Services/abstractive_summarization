import unittest
from utility import convert_full_data
import os


def test_text_to_vocab_function(input_folder : str, output_file : str):
    """
    test for vocab generation
    :param input_folder: path to input folder
    :param output_file:
    :return:
    """
    return convert_full_data._text_to_vocabulary(input_folder, output_file)

def test_text_to_binary_function(input_folder : str, output_files : list, split_fractions : list):
    """
    test for binarization
    :param input_folder: path to inout folder
    :param output_files: path to test train and validation file, a list
    :param split_fractions: rations of file : a list
    :return:
    """
    return convert_full_data._text_to_binary(input_folder, output_files, split_fractions)

def cleanup():
    """
    cleaning up file generated by test
    :return:
    """
    os.remove("test_files/splits/train.bin")
    os.remove("test_files/splits/test.bin")
    os.remove("test_files/vocab/vocab")



class MyTest(unittest.TestCase):
    def test(self):
        self.assertTrue(test_text_to_vocab_function('test_files/raw_files/', "test_files/vocab/vocab"))
        self.assertTrue(test_text_to_binary_function('test_files/raw_files/', ["test_files/splits/train.bin","test_files/splits/test.bin"], [0.8,0.2]))
        cleanup()

if __name__ == '__main__':
        test = MyTest()
        test.test()
